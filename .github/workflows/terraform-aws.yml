name: 'Terraform AWS CI/CD'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  # AWS Configuration
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Terraform backend configuration
  TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
  TF_BACKEND_KEY: "env/dev/terraform.tfstate"
  TF_BACKEND_REGION: ${{ secrets.AWS_REGION }}
  
  # Set Terraform working directory if different from root
  TF_WORKING_DIR: './terraform'
  # Set Terraform version
  TF_VERSION: '1.12.0'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${TF_BACKEND_BUCKET}" \
          -backend-config="key=${TF_BACKEND_KEY}" \
          -backend-config="region=${TF_BACKEND_REGION}"
      
    # Validate Terraform files
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Format terraform code
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    # Generate a Terraform plan for PR comments
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -var="use_eks=true" -no-color
      continue-on-error: true

    # Add plan output to PR if workflow triggered by PR
    - name: Update PR with Plan Output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Apply Terraform changes (only runs on push to main)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var="use_eks=true" -auto-approve -input=false
      
    # Add a step to clean up temporary AWS session credentials (security best practice)
    - name: Cleanup AWS Session
      if: always()
      run: |
        # Clear AWS credentials from environment
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY
        unset AWS_SESSION_TOKEN